@{
    var currentController = ViewData["CurrentController"] ?? "MAIN";
    var listOtherLayout = new string[] { "About", "Contact", "Authentication", "Post" };
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="description" content="Orbitor,business,company,agency,modern,bootstrap4,tech,software">
    <meta name="author" content="themefisher.com">
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - EatWellAssistant</title>
    <link rel="shortcut icon" type="~/client/image/x-icon" href="~/images/favicon.ico" />
    <!-- bootstrap.min css -->
    <link rel="stylesheet" href="~/client/plugins/bootstrap/css/bootstrap.min.css">
    <!-- Icon Font Css -->
    <link rel="stylesheet" href="~/client/plugins/icofont/icofont.min.css">
    <!-- Slick Slider  CSS -->
    <link rel="stylesheet" href="~/client/plugins/slick-carousel/slick/slick.css">
    <link rel="stylesheet" href="~/client/plugins/slick-carousel/slick/slick-theme.css">
    <!-- Main Stylesheet -->
    <link rel="stylesheet" href="~/client/css/style.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <style>
        #toggleChat {
            position: fixed;
            bottom: 430px; /* Đặt top thay vì bottom */
            right: 20px;
            background-color: #F1AF00;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            #toggleChat:hover {
                background-color: #83C75D;
            }


        .chat-container {
            width: 80%; /* Đặt chiều rộng tối đa */
            max-width: 500px; /* Giảm chiều rộng tối đa của hộp chat */
            height: 400px; /* Đặt chiều cao cố định */
            display: flex;
            flex-direction: column;
            border: 1px solid #ccc;
            border-radius: 10px;
            overflow: hidden;
            background-color: white;
            position: fixed;
            bottom: 20px;
            right: 20px;
        }

        .chat-header {
            background-color: #83C75D; /* Màu nền header tương tự với Chat GPT */
            color: white;
            padding: 10px;
            text-align: center;
            border-top-left-radius: 10px; /* Bo tròn góc header */
            border-top-right-radius: 10px;
        }

        .chat-body {
            flex-grow: 1;
            padding: 10px;
            overflow-y: auto;
        }

        .chat-footer {
            display: flex;
            align-items: center;
            padding: 10px;
            background-color: #f2f2f2;
            border-bottom-left-radius: 10px; /* Bo tròn góc footer */
            border-bottom-right-radius: 10px;
        }

        .chat-message {
            margin-bottom: 5px; /* Giảm khoảng cách giữa các tin nhắn */
            border-radius: 5px; /* Bo tròn góc của tin nhắn */
            padding: 8px;
            max-width: 90%; /* Giảm kích thước tin nhắn */
        }

            .chat-message.user {
                background-color: #F1AF00;
                align-self: flex-end;
                text-align: right;
                padding: 8px;
                border-radius: 10px;
                margin: 5px 0;
                white-space: pre-wrap;
                word-break: break-word; /* Hiển thị đủ theo các kí tự */
            }

            .chat-message.gpt {
                background-color: #f2f2f2;
                align-self: flex-start;
                text-align: left;
                padding: 8px;
                border-radius: 10px;
                margin: 5px 0;
                white-space: pre-wrap;
                word-break: break-word; /* Hiển thị đủ theo các kí tự */
            }

            .chat-message.error {
                color: red;
            }

        .chat-footer textarea {
            width: calc(100% - 100px); /* Đặt chiều rộng của textarea */
            height: 47px; /* Đặt độ cao của textarea */
            padding: 10px; /* Thêm padding để nội dung không bị gần lề */
            border: none; /* Loại bỏ viền */
            border-radius: 25px; /* Bo tròn cả 4 góc */
            resize: none; /* Không cho phép resize */
        }

        .chat-footer button {
            background-color: #83C75D; /* Màu nền */
            color: white; /* Màu chữ */
            border: none; /* Loại bỏ viền */
            padding: 10px 20px; /* Kích thước padding */
            cursor: pointer; /* Con trỏ khi di chuột vào */
            transition: background-color 0.3s ease; /* Hiệu ứng chuyển đổi màu */
            border-radius: 25px; /* Bo tròn cả 4 góc */
            margin-left: 10px; /* Khoảng cách giữa textarea và nút gửi */
        }


            .chat-footer button:hover {
                background-color: #83C75D; /* Màu nền khi di chuột vào */
            }
    </style>
    <link href="~/common/post.css" rel="stylesheet" />
    @RenderSection("css", false)
</head>
<body>
    <partial name="_Header" />

    @if (!listOtherLayout.Contains(currentController))
    {
        <section class="banner">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 col-md-12 col-xl-7">
                        <div class="block">
                            <div class="divider mb-3"></div>
                            <span class="text-uppercase text-sm letter-spacing ">Giải pháp chăm sóc sức khỏe tổng thể</span>
                            <h1 class="mb-3 mt-3">EatWell  Assistant</h1>


                            <div class="btn-container ">
                                <a href="@Url.Action("Index", "Cart")" class="btn btn-main-2 btn-icon btn-round-full">Giỏ hàng<i class="icofont-simple-right ml-2  "></i></a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }


    @RenderBody()

    @if (!listOtherLayout.Contains(currentController))
    {
        <section class="section about">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-lg-4 col-sm-6">
                        <div class="about-img">
                            <img src="~/client/images/about/img-1.jpg" alt="" class="img-fluid">
                            <img src="~/client/images/about/img-2.jpg" alt="" class="img-fluid mt-4">
                        </div>
                    </div>
                    <div class="col-lg-4 col-sm-6">
                        <div class="about-img mt-4 mt-lg-0">
                            <img src="~/client/images/about/img-3.jpg" alt="" class="img-fluid">
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="about-content pl-4 mt-4 mt-lg-0">
                            <h2 class="title-color">Kho nguyên liệu </h2>
                            <p class="mt-4 mb-5">Kiểm tra định lượng calors có trong đồ ăn , phân tích và kết hợp cho tuỳ chọn chế độ bạn muốn xây dựng</p>

                            <a href="@Url.Action("Index", "Material")" class="btn btn-main-2 btn-round-full btn-icon">Đi đến kho<i class="icofont-simple-right ml-3"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <partial name="_CTA" />
        <partial name="_Testimonial" />
        <partial name="_Client" />
    }
    <partial name="_Footer" />

    <script src="~/client/plugins/jquery/jquery.js"></script>
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
    <!-- Bootstrap 4.3.2 -->
    <script src="~/client/plugins/bootstrap/js/popper.min.js"></script>
    <script src="~/client/plugins/bootstrap/js/bootstrap.min.js"></script>
    <script src="~/client/plugins/counterup/jquery.easing.js"></script>
    <!-- Slick Slider -->
    <script src="~/client/plugins/slick-carousel/slick/slick.min.js"></script>
    <!-- Counterup -->
    <script src="~/client/plugins/counterup/jquery.waypoints.min.js"></script>

    <script src="~/client/plugins/shuffle/shuffle.min.js"></script>
    <script src="~/client/plugins/counterup/jquery.counterup.min.js"></script>
    <!-- Google Map -->
    <script src="~/client/plugins/google-map/map.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAkeLMlsiwzp6b3Gnaxd86lvakimwGA6UA&callback=initMap"></script>

    <script src="~/client/js/script.js"></script>
    <script src="~/client/js/contact.js"></script>

    <button id="toggleChat">Chat_GPT</button>
    <div class="chat-container">
        <div class="chat-header">
            <h4>Chat with GPT-3.5</h4>
        </div>
        <div class="chat-body" id="chatBody">
            <!-- Initial greeting message -->
            <div class="chat-message gpt">Xin chào, tôi có thể giúp gì cho bạn?</div>
        </div>
        <div class="chat-footer">
            <textarea id="question" placeholder="Enter your request here..."></textarea>
            <button id="send">Send</button>
        </div>
    </div>



    <input type="file" id="fileInput" />


    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        const apiKey = 'sk-MHWxdWXl8J4MOcrE91630c16292746CaA356Aa376667AdC1';  // Replace with your API key

        $(document).ready(function () {
            const storedContent = localStorage.getItem('fileContent');
            if (storedContent) {
                console.log('Stored file content loaded.');
            }
        });

        $('#send').click(function () {
            const file = document.getElementById('fileInput').files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const content = e.target.result;
                    localStorage.setItem('fileContent', content);  // Save file content to local storage
                    generateCompletion(content);
                };
                reader.readAsText(file);
            } else {
                const storedContent = localStorage.getItem('fileContent');
                if (storedContent) {
                    generateCompletion(storedContent);
                } else {
                    alert('Please upload a file first.');
                }
            }
        });

        async function generateCompletion(fileContent) {
            const question = $('#question').val();
            if (!question) {
                alert('Please enter a question.');
                return;
            }

            const content = `File Content: ${fileContent}\n\nQuestion: ${question}`;

            addChatMessage('user', question);  // Add user's question to the chat

            try {
                const data = {
                    model: 'gpt-3.5-turbo',
                    messages: [{
                        role: "user",
                        content: content
                    }],
                    max_tokens: 500
                };

                const response = await fetch('https://yescale.one/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + apiKey,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data),
                });

                if (!response.ok) {
                    console.log('HTTP error', response.status);
                    const errorDetail = await response.text();
                    console.log('Error response body:', errorDetail);
                    addChatMessage('error', errorDetail);  // Show error message in chat
                } else {
                    const result = await response.json();
                    typeWriter('gpt', result.choices[0].message.content);  // Show GPT's response in chat with typewriter effect
                    console.log(result);
                }
            } catch (error) {
                console.error('Fetch error:', error);
                addChatMessage('error', 'Fetch error: ' + error.message);  // Show fetch error in chat
            }

            // Clear the input field
            $('#question').val('');
        }

        function addChatMessage(sender, message) {
            const chatBody = $('#chatBody');
            const messageElement = `<div class="chat-message ${sender}">${message}</div>`;
            chatBody.append(messageElement);
            chatBody.scrollTop(chatBody.prop("scrollHeight"));  // Scroll to the bottom
        }

        function typeWriter(sender, text) {
            const chatBody = $('#chatBody');
            const messageElement = `<div class="chat-message ${sender}"></div>`;
            const messageDiv = $(messageElement);
            chatBody.append(messageDiv);
            chatBody.scrollTop(chatBody.prop("scrollHeight"));  // Scroll to the bottom

            let i = 0;
            function type() {
                if (i < text.length) {
                    messageDiv.append(text.charAt(i));
                    i++;
                    setTimeout(type, 30);  // Adjust typing speed here (in milliseconds)
                    chatBody.scrollTop(chatBody.prop("scrollHeight"));  // Keep scrolling to the bottom
                }
            }

            type();
        }
        $(document).ready(function () {
            $('#toggleChat').click(function () {
                $('.chat-container').toggle(); // Toggle the visibility of the chat container
            });
        });

        $('.btn-add-info').click(() => {
            var template = $('#another-info-template').html();
            if (template)
                $('.another-info-container').append(template);
        });

        $(document).on('click', '.btn-remove-info', function () {
            $(this).parents('.form-item.form-group').remove();
        });

        $('#workout').on('change', function () {
            if ($(this).val() == 'no')
                $('.frequency-div').addClass('d-none');
            else
                $('.frequency-div').removeClass('d-none');
        })

        $('.btn-view-consulting').click(async () => {
            var height = $('#height').val();
            var weight = $('#weight').val();
            var gender = $('#gender').val() == '0' ? 'nam' : 'nữ';
            var workout = $('#workout').val();
            var frequency = $('#frequency').val();
            var pathology = $('#pathology').val();
            var target = $('#target').val();

            if (!height || !weight || !target) {
                alert('Vui lòng nhập đầy đủ thông tin yêu cầu để có thể nhận được lời khuyên tốt nhất!');
                return;
            }
            var question = `Hãy cho tôi một chế độ dinh dưỡng và tập luyện phù hợp cho người có giới tính ${gender}, chiều cao ${height}, cân nặng ${weight}`;
            if (workout == 'no') {
                question += ' không tập luyện thể dục, thể thao';
            }
            else {
                var workoutText = '';
                if (workout == 'sport')
                    workoutText = 'tập thể thao với các môn như bơi lội, bóng chuyền'
                else if (workout == 'gym')
                    workoutText = 'tập kháng lực với tạ nặng'
                else if (workout == 'cardio')
                    workoutText = 'tập cardio như nhảy dây, chạy bền'
                else
                    workoutText = 'tập điều độ cardio và kháng lực với tạ'

                question += ' ' + workoutText + ' tần suất: ' + frequency + ' buổi/tuần';
            }
            if (pathology)
                question += ' bệnh lý: ' + pathology;

            question += ' với mục tiêu là: ' + target;
            var moreInfo = '';

            $.each($('.another-info-container').find('.form-item'), (i, item) => {
                var key = $(item).find('.infor-key').val();
                var value = $(item).find('.infor-value').val();
                if (key && value)
                    moreInfo += `${key}: ${value}, `
            });
            if (moreInfo)
                question += '. Ngoài ra đối tượng còn có ' + moreInfo;

            const file = document.getElementById('fileInput').files[0];
            if (!file) {
                var fileContent = localStorage.getItem('fileContent');
                loadConsulting(fileContent, question);
            }
            else {
                var reader = new FileReader();
                reader.onload = function (e) {
                    var fileContent = e.target.result;
                    loadConsulting(fileContent, question);
                };
                reader.readAsText(file);
            }
        })

        async function loadConsulting(fileContent, question) {
            const content = `File Content: ${fileContent}\n\nQuestion: ${question}`;
            try {
                const response = await fetch('https://yescale.one/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + apiKey,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: 'gpt-3.5-turbo',
                        messages: [{
                            role: "user",
                            content: content
                        }],
                        max_tokens: 1000
                    }),
                });

                const result = await response.json();
                var message = result.choices[0].message.content.replaceAll('\n', ' <br/> ');
                var binding = message.split(' ');
                $('#consulting-message').html('');
                let i = 0;
                function type() {
                    if (i < binding.length) {
                        $('#consulting-message').append(binding[i] + ' ');
                        i++;
                        setTimeout(type, 30);
                    }
                }

                type();
            } catch (error) {
                console.error('Có lỗi xảy ra:', error);
            }
        }

    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>